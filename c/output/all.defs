
alias void function(aes_ctx *ctx, uint length, uint8_t *key) da_nettle_aes_set_encrypt_key;
alias void function(aes_ctx *ctx, uint length, uint8_t *key) da_nettle_aes_set_decrypt_key;
alias void function(aes_ctx *dst, aes_ctx *src) da_nettle_aes_invert_key;
alias void function(aes_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_aes_encrypt;
alias void function(aes_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_aes_decrypt;
alias void function(uint8_t *dst, uint8_t src) da_nettle_base16_encode_single;
alias void function(uint8_t *dst, uint length, uint8_t *src) da_nettle_base16_encode_update;
alias void function(base16_decode_ctx *ctx) da_nettle_base16_decode_init;
alias int function(base16_decode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base16_decode_single;
alias int function(base16_decode_ctx *ctx, uint *dst_length, uint8_t *dst, uint src_length, uint8_t *src) da_nettle_base16_decode_update;
alias int function(base16_decode_ctx *ctx) da_nettle_base16_decode_final;
alias void function(base64_encode_ctx *ctx) da_nettle_base64_encode_init;
alias uint function(base64_encode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base64_encode_single;
alias uint function(base64_encode_ctx *ctx, uint8_t *dst, uint length, uint8_t *src) da_nettle_base64_encode_update;
alias uint function(base64_encode_ctx *ctx, uint8_t *dst) da_nettle_base64_encode_final;
alias void function(uint8_t *dst, uint length, uint8_t *src) da_nettle_base64_encode_raw;
alias void function(uint8_t *dst, uint32_t group) da_nettle_base64_encode_group;
alias void function(base64_decode_ctx *ctx) da_nettle_base64_decode_init;
alias int function(base64_decode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base64_decode_single;
alias int function(base64_decode_ctx *ctx, uint *dst_length, uint8_t *dst, uint src_length, uint8_t *src) da_nettle_base64_decode_update;
alias int function(base64_decode_ctx *ctx) da_nettle_base64_decode_final;
alias int function(blowfish_ctx *ctx, uint length, uint8_t *key) da_nettle_blowfish_set_key;
alias void function(blowfish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_blowfish_encrypt;
alias void function(blowfish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_blowfish_decrypt;
alias int function(des_ctx *ctx, uint8_t *key) da_nettle_des_set_key;
alias void function(des_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des_encrypt;
alias void function(des_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des_decrypt;
alias int function(uint length, uint8_t *key) da_nettle_des_check_parity;
alias void function(uint length, uint8_t *dst, uint8_t *src) da_nettle_des_fix_parity;
alias int function(des3_ctx *ctx, uint8_t *key) da_nettle_des3_set_key;
alias void function(des3_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des3_encrypt;
alias void function(des3_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des3_decrypt;
alias void function(sha1_ctx *ctx) da_nettle_sha1_init;
alias void function(sha1_ctx *ctx, uint length, uint8_t *data) da_nettle_sha1_update;
alias void function(sha1_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha1_digest;
alias void function(uint32_t *state, uint8_t *data) da__nettle_sha1_compress;
alias void function(sha256_ctx *ctx) da_nettle_sha256_init;
alias void function(sha256_ctx *ctx, uint length, uint8_t *data) da_nettle_sha256_update;
alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha256_digest;
alias void function(uint32_t *state, uint8_t *data, uint32_t *k) da__nettle_sha256_compress;
alias void function(sha256_ctx *ctx) da_nettle_sha224_init;
alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha224_digest;
alias void function(sha512_ctx *ctx) da_nettle_sha512_init;
alias void function(sha512_ctx *ctx, uint length, uint8_t *data) da_nettle_sha512_update;
alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha512_digest;
alias void function(uint64_t *state, uint8_t *data, uint64_t *k) da__nettle_sha512_compress;
alias void function(sha512_ctx *ctx) da_nettle_sha384_init;
alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha384_digest;
alias void function(dsa_public_key *key) da_nettle_dsa_public_key_init;
alias void function(dsa_public_key *key) da_nettle_dsa_public_key_clear;
alias void function(dsa_private_key *key) da_nettle_dsa_private_key_init;
alias void function(dsa_private_key *key) da_nettle_dsa_private_key_clear;
alias void function(dsa_signature *signature) da_nettle_dsa_signature_init;
alias void function(dsa_signature *signature) da_nettle_dsa_signature_clear;
alias int function(dsa_public_key *key, sha1_ctx *hash, dsa_signature *signature) da_nettle_dsa_sha1_verify;
alias int function(dsa_public_key *key, sha256_ctx *hash, dsa_signature *signature) da_nettle_dsa_sha256_verify;
alias int function(dsa_public_key *key, uint8_t *digest, dsa_signature *signature) da_nettle_dsa_sha1_verify_digest;
alias int function(dsa_public_key *key, uint8_t *digest, dsa_signature *signature) da_nettle_dsa_sha256_verify_digest;
alias int function(nettle_buffer *buffer, char *algorithm_name, dsa_public_key *pub, dsa_private_key *priv) da_nettle_dsa_keypair_to_sexp;
alias int function(dsa_signature *rs, sexp_iterator *i, uint q_bits) da_nettle_dsa_signature_from_sexp;
alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint q_bits, sexp_iterator *i) da_nettle_dsa_keypair_from_sexp_alist;
alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *expr) da_nettle_dsa_sha1_keypair_from_sexp;
alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *expr) da_nettle_dsa_sha256_keypair_from_sexp;
alias int function(dsa_public_key *pub, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_params_from_der_iterator;
alias int function(dsa_public_key *pub, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_public_key_from_der_iterator;
alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_openssl_private_key_from_der_iterator;
alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *data) da_nettle_openssl_provate_key_from_der;
alias int function(dsa_public_key *key, uint digest_size, uint8_t *digest, dsa_signature *signature) da__nettle_dsa_verify;
alias uint function(__mpz_struct *x) da_nettle_mpz_sizeinbase_256_s;
alias uint function(__mpz_struct *x) da_nettle_mpz_sizeinbase_256_u;
alias void function(uint length, uint8_t *s, __mpz_struct *x) da_nettle_mpz_get_str_256;
alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_set_str_256_s;
alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_init_set_str_256_s;
alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_set_str_256_u;
alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_init_set_str_256_u;
alias int function(__mpz_struct *x, uint limit, sexp_iterator *i) da_nettle_mpz_set_sexp;
alias int function(asn1_der_iterator *iterator, __mpz_struct *x, uint max_bits) da_nettle_asn1_der_get_bignum;
alias int function(nettle_buffer *buffer, uint32_t i) da_nettle_pgp_put_uint32;
alias int function(nettle_buffer *buffer, uint i) da_nettle_pgp_put_uint16;
alias int function(nettle_buffer *buffer, __mpz_struct *x) da_nettle_pgp_put_mpi;
alias int function(nettle_buffer *buffer, uint length, uint8_t *s) da_nettle_pgp_put_string;
alias int function(nettle_buffer *buffer, uint length) da_nettle_pgp_put_length;
alias int function(nettle_buffer *buffer, uint tag, uint length) da_nettle_pgp_put_header;
alias void function(nettle_buffer *buffer, uint start, uint field_size) da_nettle_pgp_put_header_length;
alias uint function(nettle_buffer *buffer) da_nettle_pgp_sub_packet_start;
alias int function(nettle_buffer *buffer, uint type, uint length, uint8_t *data) da_nettle_pgp_put_sub_packet;
alias void function(nettle_buffer *buffer, uint start) da_nettle_pgp_sub_packet_end;
alias int function(nettle_buffer *buffer, rsa_private_key *key, uint8_t *keyid, uint type, sha1_ctx *hash) da_nettle_pgp_put_rsa_sha1_signature;
alias int function(nettle_buffer *buffer, uint length, uint8_t *name) da_nettle_pgp_put_userid;
alias uint32_t function(uint length, uint8_t *data) da_nettle_pgp_crc24;
alias int function(nettle_buffer *buffer, char *tag, uint length, uint8_t *data) da_nettle_pgp_armor;
alias void function(md5_ctx *ctx) da_nettle_md5_init;
alias void function(md5_ctx *ctx, uint length, uint8_t *data) da_nettle_md5_update;
alias void function(md5_ctx *ctx, uint length, uint8_t *digest) da_nettle_md5_digest;
alias void function(uint32_t *state, uint8_t *data) da__nettle_md5_compress;
alias void function(sha1_ctx *ctx) da_nettle_sha1_init;
alias void function(sha1_ctx *ctx, uint length, uint8_t *data) da_nettle_sha1_update;
alias void function(sha1_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha1_digest;
alias void function(uint32_t *state, uint8_t *data) da__nettle_sha1_compress;
alias void function(sha256_ctx *ctx) da_nettle_sha256_init;
alias void function(sha256_ctx *ctx, uint length, uint8_t *data) da_nettle_sha256_update;
alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha256_digest;
alias void function(uint32_t *state, uint8_t *data, uint32_t *k) da__nettle_sha256_compress;
alias void function(sha256_ctx *ctx) da_nettle_sha224_init;
alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha224_digest;
alias void function(sha512_ctx *ctx) da_nettle_sha512_init;
alias void function(sha512_ctx *ctx, uint length, uint8_t *data) da_nettle_sha512_update;
alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha512_digest;
alias void function(uint64_t *state, uint8_t *data, uint64_t *k) da__nettle_sha512_compress;
alias void function(sha512_ctx *ctx) da_nettle_sha384_init;
alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha384_digest;
alias void function(rsa_public_key *key) da_nettle_rsa_public_key_init;
alias void function(rsa_public_key *key) da_nettle_rsa_public_key_clear;
alias int function(rsa_public_key *key) da_nettle_rsa_public_key_prepare;
alias void function(rsa_private_key *key) da_nettle_rsa_private_key_init;
alias void function(rsa_private_key *key) da_nettle_rsa_private_key_clear;
alias int function(rsa_private_key *key) da_nettle_rsa_private_key_prepare;
alias int function(rsa_private_key *key, uint length, uint8_t *digest_info, __mpz_struct *s) da_nettle_rsa_pkcs1_sign;
alias int function(rsa_public_key *key, uint length, uint8_t *digest_info, __mpz_struct *signature) da_nettle_rsa_pkcs1_verify;
alias int function(rsa_private_key *key, md5_ctx *hash, __mpz_struct *signature) da_nettle_rsa_md5_sign;
alias int function(rsa_public_key *key, md5_ctx *hash, __mpz_struct *signature) da_nettle_rsa_md5_verify;
alias int function(rsa_private_key *key, sha1_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha1_sign;
alias int function(rsa_public_key *key, sha1_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha1_verify;
alias int function(rsa_private_key *key, sha256_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha256_sign;
alias int function(rsa_public_key *key, sha256_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha256_verify;
alias int function(rsa_private_key *key, sha512_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha512_sign;
alias int function(rsa_public_key *key, sha512_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha512_verify;
alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_md5_sign_digest;
alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_md5_verify_digest;
alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha1_sign_digest;
alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha1_verify_digest;
alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha256_sign_digest;
alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha256_verify_digest;
alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha512_sign_digest;
alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha512_verify_digest;
alias int function(rsa_private_key *key, uint *length, uint8_t *cleartext, __mpz_struct *ciphertext) da_nettle_rsa_decrypt;
alias void function(rsa_private_key *key, __mpz_struct *x, __mpz_struct *m) da_nettle_rsa_compute_root;
alias int function(nettle_buffer *buffer, char *algorithm_name, rsa_public_key *pub, rsa_private_key *priv) da_nettle_rsa_keypair_to_sexp;
alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, sexp_iterator *i) da_nettle_rsa_keypair_from_sexp_alist;
alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, uint length, uint8_t *expr) da_nettle_rsa_keypair_from_sexp;
alias int function(rsa_public_key *pub, uint limit, asn1_der_iterator *i) da_nettle_rsa_public_key_from_der_iterator;
alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, asn1_der_iterator *i) da_nettle_rsa_private_key_from_der_iterator;
alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, uint length, uint8_t *data) da_nettle_rsa_keypair_from_der;
alias int function(nettle_buffer *buffer, rsa_public_key *pub, rsa_private_key *priv, char *userid) da_nettle_rsa_keypair_to_openpgp;
alias int function(rsa_public_key *key, __mpz_struct *m, __mpz_struct *s) da__nettle_rsa_verify;
alias uint function(__mpz_struct *n) da__nettle_rsa_check_size;
alias void function(rsa_public_key *pub, __mpz_struct *c, __mpz_struct *ri) da__nettle_rsa_unblind;
alias void function(twofish_ctx *ctx, uint length, uint8_t *key) da_nettle_twofish_set_key;
alias void function(twofish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_twofish_encrypt;
alias void function(twofish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_twofish_decrypt;
