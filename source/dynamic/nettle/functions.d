/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.nettle.functions;

private
{
    import derelict.nettle.types;
}

extern(C) nothrow
{    
    alias int function(__mpz_struct *x, uint limit, sexp_iterator *i) da_nettle_mpz_set_sexp;
    alias int function(asn1_der_iterator *iterator, __mpz_struct *x, uint max_bits) da_nettle_asn1_der_get_bignum;
    alias int function(base16_decode_ctx *ctx) da_nettle_base16_decode_final;
    alias int function(base16_decode_ctx *ctx, uint *dst_length, uint8_t *dst, uint src_length, uint8_t *src) da_nettle_base16_decode_update;
    alias int function(base16_decode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base16_decode_single;
    alias int function(base64_decode_ctx *ctx) da_nettle_base64_decode_final;
    alias int function(base64_decode_ctx *ctx, uint *dst_length, uint8_t *dst, uint src_length, uint8_t *src) da_nettle_base64_decode_update;
    alias int function(base64_decode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base64_decode_single;
    alias int function(blowfish_ctx *ctx, uint length, uint8_t *key) da_nettle_blowfish_set_key;
    alias int function(des_ctx *ctx, uint8_t *key) da_nettle_des_set_key;
    alias int function(des3_ctx *ctx, uint8_t *key) da_nettle_des3_set_key;
    alias int function(dsa_public_key *key, sha1_ctx *hash, dsa_signature *signature) da_nettle_dsa_sha1_verify;
    alias int function(dsa_public_key *key, sha256_ctx *hash, dsa_signature *signature) da_nettle_dsa_sha256_verify;
    alias int function(dsa_public_key *key, uint digest_size, uint8_t *digest, dsa_signature *signature) da__nettle_dsa_verify;
    alias int function(dsa_public_key *key, uint8_t *digest, dsa_signature *signature) da_nettle_dsa_sha1_verify_digest;
    alias int function(dsa_public_key *key, uint8_t *digest, dsa_signature *signature) da_nettle_dsa_sha256_verify_digest;
    alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_openssl_private_key_from_der_iterator;
    alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *data) da_nettle_openssl_provate_key_from_der;
    alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *expr) da_nettle_dsa_sha1_keypair_from_sexp;
    alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint length, uint8_t *expr) da_nettle_dsa_sha256_keypair_from_sexp;
    alias int function(dsa_public_key *pub, dsa_private_key *priv, uint p_max_bits, uint q_bits, sexp_iterator *i) da_nettle_dsa_keypair_from_sexp_alist;
    alias int function(dsa_public_key *pub, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_params_from_der_iterator;
    alias int function(dsa_public_key *pub, uint p_max_bits, asn1_der_iterator *i) da_nettle_dsa_public_key_from_der_iterator;
    alias int function(dsa_signature *rs, sexp_iterator *i, uint q_bits) da_nettle_dsa_signature_from_sexp;
    alias int function(nettle_buffer *buffer, __mpz_struct *x) da_nettle_pgp_put_mpi;
    alias int function(nettle_buffer *buffer, char *algorithm_name, dsa_public_key *pub, dsa_private_key *priv) da_nettle_dsa_keypair_to_sexp;
    alias int function(nettle_buffer *buffer, char *algorithm_name, rsa_public_key *pub, rsa_private_key *priv) da_nettle_rsa_keypair_to_sexp;
    alias int function(nettle_buffer *buffer, char *tag, uint length, uint8_t *data) da_nettle_pgp_armor;
    alias int function(nettle_buffer *buffer, rsa_private_key *key, uint8_t *keyid, uint type, sha1_ctx *hash) da_nettle_pgp_put_rsa_sha1_signature;
    alias int function(nettle_buffer *buffer, rsa_public_key *pub, rsa_private_key *priv, char *userid) da_nettle_rsa_keypair_to_openpgp;
    alias int function(nettle_buffer *buffer, uint i) da_nettle_pgp_put_uint16;
    alias int function(nettle_buffer *buffer, uint length) da_nettle_pgp_put_length;
    alias int function(nettle_buffer *buffer, uint length, uint8_t *name) da_nettle_pgp_put_userid;
    alias int function(nettle_buffer *buffer, uint length, uint8_t *s) da_nettle_pgp_put_string;
    alias int function(nettle_buffer *buffer, uint tag, uint length) da_nettle_pgp_put_header;
    alias int function(nettle_buffer *buffer, uint type, uint length, uint8_t *data) da_nettle_pgp_put_sub_packet;
    alias int function(nettle_buffer *buffer, uint32_t i) da_nettle_pgp_put_uint32;
    alias int function(rsa_private_key *key) da_nettle_rsa_private_key_prepare;
    alias int function(rsa_private_key *key, md5_ctx *hash, __mpz_struct *signature) da_nettle_rsa_md5_sign;
    alias int function(rsa_private_key *key, sha1_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha1_sign;
    alias int function(rsa_private_key *key, sha256_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha256_sign;
    alias int function(rsa_private_key *key, sha512_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha512_sign;
    alias int function(rsa_private_key *key, uint *length, uint8_t *cleartext, __mpz_struct *ciphertext) da_nettle_rsa_decrypt;
    alias int function(rsa_private_key *key, uint length, uint8_t *digest_info, __mpz_struct *s) da_nettle_rsa_pkcs1_sign;
    alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_md5_sign_digest;
    alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha1_sign_digest;
    alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha256_sign_digest;
    alias int function(rsa_private_key *key, uint8_t *digest, __mpz_struct *s) da_nettle_rsa_sha512_sign_digest;
    alias int function(rsa_public_key *key) da_nettle_rsa_public_key_prepare;
    alias int function(rsa_public_key *key, __mpz_struct *m, __mpz_struct *s) da__nettle_rsa_verify;
    alias int function(rsa_public_key *key, md5_ctx *hash, __mpz_struct *signature) da_nettle_rsa_md5_verify;
    alias int function(rsa_public_key *key, sha1_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha1_verify;
    alias int function(rsa_public_key *key, sha256_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha256_verify;
    alias int function(rsa_public_key *key, sha512_ctx *hash, __mpz_struct *signature) da_nettle_rsa_sha512_verify;
    alias int function(rsa_public_key *key, uint length, uint8_t *digest_info, __mpz_struct *signature) da_nettle_rsa_pkcs1_verify;
    alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_md5_verify_digest;
    alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha1_verify_digest;
    alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha256_verify_digest;
    alias int function(rsa_public_key *key, uint8_t *digest, __mpz_struct *signature) da_nettle_rsa_sha512_verify_digest;
    alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, asn1_der_iterator *i) da_nettle_rsa_private_key_from_der_iterator;
    alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, sexp_iterator *i) da_nettle_rsa_keypair_from_sexp_alist;
    alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, uint length, uint8_t *data) da_nettle_rsa_keypair_from_der;
    alias int function(rsa_public_key *pub, rsa_private_key *priv, uint limit, uint length, uint8_t *expr) da_nettle_rsa_keypair_from_sexp;
    alias int function(rsa_public_key *pub, uint limit, asn1_der_iterator *i) da_nettle_rsa_public_key_from_der_iterator;
    alias int function(uint length, uint8_t *key) da_nettle_des_check_parity;
    alias uint function(__mpz_struct *n) da__nettle_rsa_check_size;
    alias uint function(__mpz_struct *x) da_nettle_mpz_sizeinbase_256_s;
    alias uint function(__mpz_struct *x) da_nettle_mpz_sizeinbase_256_u;
    alias uint function(base64_encode_ctx *ctx, uint8_t *dst) da_nettle_base64_encode_final;
    alias uint function(base64_encode_ctx *ctx, uint8_t *dst, uint length, uint8_t *src) da_nettle_base64_encode_update;
    alias uint function(base64_encode_ctx *ctx, uint8_t *dst, uint8_t src) da_nettle_base64_encode_single;
    alias uint function(nettle_buffer *buffer) da_nettle_pgp_sub_packet_start;
    alias uint32_t function(uint length, uint8_t *data) da_nettle_pgp_crc24;
    alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_init_set_str_256_s;
    alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_init_set_str_256_u;
    alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_set_str_256_s;
    alias void function(__mpz_struct *x, uint length, uint8_t *s) da_nettle_mpz_set_str_256_u;
    alias void function(aes_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_aes_decrypt;
    alias void function(aes_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_aes_encrypt;
    alias void function(aes_ctx *ctx, uint length, uint8_t *key) da_nettle_aes_set_decrypt_key;
    alias void function(aes_ctx *ctx, uint length, uint8_t *key) da_nettle_aes_set_encrypt_key;
    alias void function(aes_ctx *dst, aes_ctx *src) da_nettle_aes_invert_key;
    alias void function(base16_decode_ctx *ctx) da_nettle_base16_decode_init;
    alias void function(base64_decode_ctx *ctx) da_nettle_base64_decode_init;
    alias void function(base64_encode_ctx *ctx) da_nettle_base64_encode_init;
    alias void function(blowfish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_blowfish_decrypt;
    alias void function(blowfish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_blowfish_encrypt;
    alias void function(des_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des_decrypt;
    alias void function(des_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des_encrypt;
    alias void function(des3_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des3_decrypt;
    alias void function(des3_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_des3_encrypt;
    alias void function(dsa_private_key *key) da_nettle_dsa_private_key_clear;
    alias void function(dsa_private_key *key) da_nettle_dsa_private_key_init;
    alias void function(dsa_public_key *key) da_nettle_dsa_public_key_clear;
    alias void function(dsa_public_key *key) da_nettle_dsa_public_key_init;
    alias void function(dsa_signature *signature) da_nettle_dsa_signature_clear;
    alias void function(dsa_signature *signature) da_nettle_dsa_signature_init;
    alias void function(md5_ctx *ctx) da_nettle_md5_init;
    alias void function(md5_ctx *ctx, uint length, uint8_t *data) da_nettle_md5_update;
    alias void function(md5_ctx *ctx, uint length, uint8_t *digest) da_nettle_md5_digest;
    alias void function(nettle_buffer *buffer, uint start) da_nettle_pgp_sub_packet_end;
    alias void function(nettle_buffer *buffer, uint start, uint field_size) da_nettle_pgp_put_header_length;
    alias void function(rsa_private_key *key) da_nettle_rsa_private_key_clear;
    alias void function(rsa_private_key *key) da_nettle_rsa_private_key_init;
    alias void function(rsa_private_key *key, __mpz_struct *x, __mpz_struct *m) da_nettle_rsa_compute_root;
    alias void function(rsa_public_key *key) da_nettle_rsa_public_key_clear;
    alias void function(rsa_public_key *key) da_nettle_rsa_public_key_init;
    alias void function(rsa_public_key *pub, __mpz_struct *c, __mpz_struct *ri) da__nettle_rsa_unblind;
    alias void function(sha1_ctx *ctx) da_nettle_sha1_init;
    alias void function(sha1_ctx *ctx, uint length, uint8_t *data) da_nettle_sha1_update;
    alias void function(sha1_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha1_digest;
    alias void function(sha256_ctx *ctx) da_nettle_sha224_init;
    alias void function(sha256_ctx *ctx) da_nettle_sha256_init;
    alias void function(sha256_ctx *ctx, uint length, uint8_t *data) da_nettle_sha256_update;
    alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha224_digest;
    alias void function(sha256_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha256_digest;
    alias void function(sha512_ctx *ctx) da_nettle_sha384_init;
    alias void function(sha512_ctx *ctx) da_nettle_sha512_init;
    alias void function(sha512_ctx *ctx, uint length, uint8_t *data) da_nettle_sha512_update;
    alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha384_digest;
    alias void function(sha512_ctx *ctx, uint length, uint8_t *digest) da_nettle_sha512_digest;
    alias void function(twofish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_twofish_decrypt;
    alias void function(twofish_ctx *ctx, uint length, uint8_t *dst, uint8_t *src) da_nettle_twofish_encrypt;
    alias void function(twofish_ctx *ctx, uint length, uint8_t *key) da_nettle_twofish_set_key;
    alias void function(uint length, uint8_t *dst, uint8_t *src) da_nettle_des_fix_parity;
    alias void function(uint length, uint8_t *s, __mpz_struct *x) da_nettle_mpz_get_str_256;
    alias void function(uint32_t *state, uint8_t *data) da__nettle_md5_compress;
    alias void function(uint32_t *state, uint8_t *data) da__nettle_sha1_compress;
    alias void function(uint32_t *state, uint8_t *data, uint32_t *k) da__nettle_sha256_compress;
    alias void function(uint64_t *state, uint8_t *data, uint64_t *k) da__nettle_sha512_compress;
    alias void function(uint8_t *dst, uint length, uint8_t *src) da_nettle_base16_encode_update;
    alias void function(uint8_t *dst, uint length, uint8_t *src) da_nettle_base64_encode_raw;
    alias void function(uint8_t *dst, uint32_t group) da_nettle_base64_encode_group;
    alias void function(uint8_t *dst, uint8_t src) da_nettle_base16_encode_single;
}

__gshared
{    
    da__nettle_dsa_verify _nettle_dsa_verify;
    da__nettle_md5_compress _nettle_md5_compress;
    da__nettle_rsa_check_size _nettle_rsa_check_size;
    da__nettle_rsa_unblind _nettle_rsa_unblind;
    da__nettle_rsa_verify _nettle_rsa_verify;
    da__nettle_sha1_compress _nettle_sha1_compress;
    da__nettle_sha256_compress _nettle_sha256_compress;
    da__nettle_sha512_compress _nettle_sha512_compress;
    da_nettle_aes_decrypt nettle_aes_decrypt;
    da_nettle_aes_encrypt nettle_aes_encrypt;
    da_nettle_aes_invert_key nettle_aes_invert_key;
    da_nettle_aes_set_decrypt_key nettle_aes_set_decrypt_key;
    da_nettle_aes_set_encrypt_key nettle_aes_set_encrypt_key;
    da_nettle_asn1_der_get_bignum nettle_asn1_der_get_bignum;
    da_nettle_base16_decode_final nettle_base16_decode_final;
    da_nettle_base16_decode_init nettle_base16_decode_init;
    da_nettle_base16_decode_single nettle_base16_decode_single;
    da_nettle_base16_decode_update nettle_base16_decode_update;
    da_nettle_base16_encode_single nettle_base16_encode_single;
    da_nettle_base16_encode_update nettle_base16_encode_update;
    da_nettle_base64_decode_final nettle_base64_decode_final;
    da_nettle_base64_decode_init nettle_base64_decode_init;
    da_nettle_base64_decode_single nettle_base64_decode_single;
    da_nettle_base64_decode_update nettle_base64_decode_update;
    da_nettle_base64_encode_final nettle_base64_encode_final;
    da_nettle_base64_encode_group nettle_base64_encode_group;
    da_nettle_base64_encode_init nettle_base64_encode_init;
    da_nettle_base64_encode_raw nettle_base64_encode_raw;
    da_nettle_base64_encode_single nettle_base64_encode_single;
    da_nettle_base64_encode_update nettle_base64_encode_update;
    da_nettle_blowfish_decrypt nettle_blowfish_decrypt;
    da_nettle_blowfish_encrypt nettle_blowfish_encrypt;
    da_nettle_blowfish_set_key nettle_blowfish_set_key;
    da_nettle_des_check_parity nettle_des_check_parity;
    da_nettle_des_decrypt nettle_des_decrypt;
    da_nettle_des_encrypt nettle_des_encrypt;
    da_nettle_des_fix_parity nettle_des_fix_parity;
    da_nettle_des_set_key nettle_des_set_key;
    da_nettle_des3_decrypt nettle_des3_decrypt;
    da_nettle_des3_encrypt nettle_des3_encrypt;
    da_nettle_des3_set_key nettle_des3_set_key;
    da_nettle_dsa_keypair_from_sexp_alist nettle_dsa_keypair_from_sexp_alist;
    da_nettle_dsa_keypair_to_sexp nettle_dsa_keypair_to_sexp;
    da_nettle_dsa_openssl_private_key_from_der_iterator nettle_dsa_openssl_private_key_from_der_iterator;
    da_nettle_dsa_params_from_der_iterator nettle_dsa_params_from_der_iterator;
    da_nettle_dsa_private_key_clear nettle_dsa_private_key_clear;
    da_nettle_dsa_private_key_init nettle_dsa_private_key_init;
    da_nettle_dsa_public_key_clear nettle_dsa_public_key_clear;
    da_nettle_dsa_public_key_from_der_iterator nettle_dsa_public_key_from_der_iterator;
    da_nettle_dsa_public_key_init nettle_dsa_public_key_init;
    da_nettle_dsa_sha1_keypair_from_sexp nettle_dsa_sha1_keypair_from_sexp;
    da_nettle_dsa_sha1_verify nettle_dsa_sha1_verify;
    da_nettle_dsa_sha1_verify_digest nettle_dsa_sha1_verify_digest;
    da_nettle_dsa_sha256_keypair_from_sexp nettle_dsa_sha256_keypair_from_sexp;
    da_nettle_dsa_sha256_verify nettle_dsa_sha256_verify;
    da_nettle_dsa_sha256_verify_digest nettle_dsa_sha256_verify_digest;
    da_nettle_dsa_signature_clear nettle_dsa_signature_clear;
    da_nettle_dsa_signature_from_sexp nettle_dsa_signature_from_sexp;
    da_nettle_dsa_signature_init nettle_dsa_signature_init;
    da_nettle_md5_digest nettle_md5_digest;
    da_nettle_md5_init nettle_md5_init;
    da_nettle_md5_update nettle_md5_update;
    da_nettle_mpz_get_str_256 nettle_mpz_get_str_256;
    da_nettle_mpz_init_set_str_256_s nettle_mpz_init_set_str_256_s;
    da_nettle_mpz_init_set_str_256_u nettle_mpz_init_set_str_256_u;
    da_nettle_mpz_set_sexp nettle_mpz_set_sexp;
    da_nettle_mpz_set_str_256_s nettle_mpz_set_str_256_s;
    da_nettle_mpz_set_str_256_u nettle_mpz_set_str_256_u;
    da_nettle_mpz_sizeinbase_256_s nettle_mpz_sizeinbase_256_s;
    da_nettle_mpz_sizeinbase_256_u nettle_mpz_sizeinbase_256_u;
    da_nettle_openssl_provate_key_from_der nettle_openssl_provate_key_from_der;
    da_nettle_pgp_armor nettle_pgp_armor;
    da_nettle_pgp_crc24 nettle_pgp_crc24;
    da_nettle_pgp_put_header nettle_pgp_put_header;
    da_nettle_pgp_put_header_length nettle_pgp_put_header_length;
    da_nettle_pgp_put_length nettle_pgp_put_length;
    da_nettle_pgp_put_mpi nettle_pgp_put_mpi;
    da_nettle_pgp_put_rsa_sha1_signature nettle_pgp_put_rsa_sha1_signature;
    da_nettle_pgp_put_string nettle_pgp_put_string;
    da_nettle_pgp_put_sub_packet nettle_pgp_put_sub_packet;
    da_nettle_pgp_put_uint16 nettle_pgp_put_uint16;
    da_nettle_pgp_put_uint32 nettle_pgp_put_uint32;
    da_nettle_pgp_put_userid nettle_pgp_put_userid;
    da_nettle_pgp_sub_packet_end nettle_pgp_sub_packet_end;
    da_nettle_pgp_sub_packet_start nettle_pgp_sub_packet_start;
    da_nettle_rsa_compute_root nettle_rsa_compute_root;
    da_nettle_rsa_decrypt nettle_rsa_decrypt;
    da_nettle_rsa_keypair_from_der nettle_rsa_keypair_from_der;
    da_nettle_rsa_keypair_from_sexp nettle_rsa_keypair_from_sexp;
    da_nettle_rsa_keypair_from_sexp_alist nettle_rsa_keypair_from_sexp_alist;
    da_nettle_rsa_keypair_to_openpgp nettle_rsa_keypair_to_openpgp;
    da_nettle_rsa_keypair_to_sexp nettle_rsa_keypair_to_sexp;
    da_nettle_rsa_md5_sign nettle_rsa_md5_sign;
    da_nettle_rsa_md5_sign_digest nettle_rsa_md5_sign_digest;
    da_nettle_rsa_md5_verify nettle_rsa_md5_verify;
    da_nettle_rsa_md5_verify_digest nettle_rsa_md5_verify_digest;
    da_nettle_rsa_pkcs1_sign nettle_rsa_pkcs1_sign;
    da_nettle_rsa_pkcs1_verify nettle_rsa_pkcs1_verify;
    da_nettle_rsa_private_key_clear nettle_rsa_private_key_clear;
    da_nettle_rsa_private_key_from_der_iterator nettle_rsa_private_key_from_der_iterator;
    da_nettle_rsa_private_key_init nettle_rsa_private_key_init;
    da_nettle_rsa_private_key_prepare nettle_rsa_private_key_prepare;
    da_nettle_rsa_public_key_clear nettle_rsa_public_key_clear;
    da_nettle_rsa_public_key_from_der_iterator nettle_rsa_public_key_from_der_iterator;
    da_nettle_rsa_public_key_init nettle_rsa_public_key_init;
    da_nettle_rsa_public_key_prepare nettle_rsa_public_key_prepare;
    da_nettle_rsa_sha1_sign nettle_rsa_sha1_sign;
    da_nettle_rsa_sha1_sign_digest nettle_rsa_sha1_sign_digest;
    da_nettle_rsa_sha1_verify nettle_rsa_sha1_verify;
    da_nettle_rsa_sha1_verify_digest nettle_rsa_sha1_verify_digest;
    da_nettle_rsa_sha256_sign nettle_rsa_sha256_sign;
    da_nettle_rsa_sha256_sign_digest nettle_rsa_sha256_sign_digest;
    da_nettle_rsa_sha256_verify nettle_rsa_sha256_verify;
    da_nettle_rsa_sha256_verify_digest nettle_rsa_sha256_verify_digest;
    da_nettle_rsa_sha512_sign nettle_rsa_sha512_sign;
    da_nettle_rsa_sha512_sign_digest nettle_rsa_sha512_sign_digest;
    da_nettle_rsa_sha512_verify nettle_rsa_sha512_verify;
    da_nettle_rsa_sha512_verify_digest nettle_rsa_sha512_verify_digest;
    da_nettle_sha1_digest nettle_sha1_digest;
    da_nettle_sha1_init nettle_sha1_init;
    da_nettle_sha1_update nettle_sha1_update;
    da_nettle_sha224_digest nettle_sha224_digest;
    da_nettle_sha224_init nettle_sha224_init;
    da_nettle_sha256_digest nettle_sha256_digest;
    da_nettle_sha256_init nettle_sha256_init;
    da_nettle_sha256_update nettle_sha256_update;
    da_nettle_sha384_digest nettle_sha384_digest;
    da_nettle_sha384_init nettle_sha384_init;
    da_nettle_sha512_digest nettle_sha512_digest;
    da_nettle_sha512_init nettle_sha512_init;
    da_nettle_sha512_update nettle_sha512_update;
    da_nettle_twofish_decrypt nettle_twofish_decrypt;
    da_nettle_twofish_encrypt nettle_twofish_encrypt;
    da_nettle_twofish_set_key nettle_twofish_set_key;
}